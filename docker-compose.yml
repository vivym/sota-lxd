version: "3.8"

services:
  proxy:
    image: traefik:v3.0
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?traefik-public}
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?traefik-tag}`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?traefik-public}
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?traefik-public}
        # traefik-http set up only to use the middleware to redirect to https
        - traefik.http.middlewares.${STACK_NAME?sota-lxd}-https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.${STACK_NAME?sota-lxd}-https-redirect.redirectscheme.permanent=true
        # Handle host with and without "www" to redirect to only one of them
        # Uses environment variable DOMAIN
        # To disable www redirection remove the Host() you want to discard, here and
        # below for HTTPS
        - traefik.http.routers.${STACK_NAME?sota-lxd}-proxy-http.rule=Host(`${DOMAIN?localhost}`) || Host(`www.${DOMAIN?localhost}`)
        - traefik.http.routers.${STACK_NAME?sota-lxd}-proxy-http.entrypoints=http
        # traefik-https the actual router using HTTPS
        - traefik.http.routers.${STACK_NAME?sota-lxd}-proxy-https.rule=Host(`${DOMAIN?localhost}`) || Host(`www.${DOMAIN?localhost}`)
        - traefik.http.routers.${STACK_NAME?sota-lxd}-proxy-https.entrypoints=https
        - traefik.http.routers.${STACK_NAME?sota-lxd}-proxy-https.tls=true
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.${STACK_NAME?sota-lxd}-proxy-https.tls.certresolver=le
        # Define the port inside of the Docker service to use
        - traefik.http.services.${STACK_NAME?sota-lxd}-proxy.loadbalancer.server.port=80
        # Handle domain with and without "www" to redirect to only one
        # To disable www redirection remove the next line
        - traefik.http.middlewares.${STACK_NAME?sota-lxd}-www-redirect.redirectregex.regex=^https?://(www.)?(${DOMAIN?localhost})/(.*)
        # Redirect a domain with www to non-www
        # To disable it remove the next line
        - traefik.http.middlewares.${STACK_NAME?sota-lxd}-www-redirect.redirectregex.replacement=https://${DOMAIN?localhost}/$${3}
        # Redirect a domain without www to www
        # To enable it remove the previous line and uncomment the next
        # - traefik.http.middlewares.${STACK_NAME}-www-redirect.redirectregex.replacement=https://www.${DOMAIN}/$${3}
        # Middleware to redirect www, to disable it remove the next line
        - traefik.http.routers.${STACK_NAME?sota-lxd}-proxy-https.middlewares=${STACK_NAME?sota-lxd}-www-redirect
        # Middleware to redirect www, and redirect HTTP to HTTPS
        # to disable www redirection remove the section: ${STACK_NAME?sota-lxd}-www-redirect,
        - traefik.http.routers.${STACK_NAME?sota-lxd}-proxy-http.middlewares=${STACK_NAME?sota-lxd}-www-redirect,${STACK_NAME?sota-lxd}-https-redirect

  db:
    image: postgres:15
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    deploy:
      placement:
        constraints:
          - node.labels.${STACK_NAME?sota-lxd}.app-db-data == true

  pgadmin:
    image: dpage/pgadmin4:latest
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?traefik-public}
      - default
    depends_on:
      - db
    env_file:
      - .env
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?traefik-public}
        - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?traefik-public}
        - traefik.http.routers.${STACK_NAME?sota-lxd}-pgadmin-http.rule=Host(`pgadmin.${DOMAIN?localhost}`)
        - traefik.http.routers.${STACK_NAME?sota-lxd}-pgadmin-http.entrypoints=http
        - traefik.http.routers.${STACK_NAME?sota-lxd}-pgadmin-http.middlewares=${STACK_NAME?sota-lxd}-https-redirect
        - traefik.http.routers.${STACK_NAME?sota-lxd}-pgadmin-https.rule=Host(`pgadmin.${DOMAIN?localhost}`)
        - traefik.http.routers.${STACK_NAME?sota-lxd}-pgadmin-https.entrypoints=https
        - traefik.http.routers.${STACK_NAME?sota-lxd}-pgadmin-https.tls=true
        - traefik.http.routers.${STACK_NAME?sota-lxd}-pgadmin-https.tls.certresolver=le
        - traefik.http.services.${STACK_NAME?sota-lxd}-pgadmin.loadbalancer.server.port=5050

  backend:
    image: '${DOCKER_IMAGE_BACKEND?sota-lxd-backend}:${TAG-latest}'
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    env_file:
      - .env
    environment:
      # Allow explicit env var override for tests
      - SERVER_NAME=${DOMAIN?localhost}
      - SERVER_HOST=https://${DOMAIN?localhost}
    depends_on:
      - db
    deploy:
      labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=${TRAEFIK_TAG?traefik-tag}
        - traefik.http.routers.${STACK_NAME?sota-lxd}-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
        - traefik.http.services.${STACK_NAME?sota-lxd}-backend.loadbalancer.server.port=80

volumes:
  app-db-data:

networks:
  sota-lxd-public:
    # Allow setting it to false for testing
    external: true
